
Test_Bench.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000007c4  00000858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  00800106  00800106  0000085e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010af  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005bd  00000000  00000000  00001abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090a  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043b  00000000  00000000  00002c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fb  00000000  00000000  0000305f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000355a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	60 c1       	rjmp	.+704    	; 0x2c4 <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	b1 c0       	rjmp	.+354    	; 0x17a <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	cf c0       	rjmp	.+414    	; 0x1c4 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	20 c1       	rjmp	.+576    	; 0x26c <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 ec       	ldi	r30, 0xC4	; 196
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 30       	cpi	r26, 0x06	; 6
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a6 e0       	ldi	r26, 0x06	; 6
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a7 39       	cpi	r26, 0x97	; 151
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	06 d3       	rcall	.+1548   	; 0x674 <main>
  68:	ab c3       	rjmp	.+1878   	; 0x7c0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Init_ADC>:

//CONTENU FONCTIONS EXTERNES

void Init_ADC(void)
{
	ADMUX = 0b01000000; //on prend AVCC comme reference et justification à droite (mode 10bits) et ADC0 comme entrée
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADCSRA = 0b10001100;  //freq à 1MHz/16==>62.500kHz et activation de l'interruption de fin de conversion
  72:	8c e8       	ldi	r24, 0x8C	; 140
  74:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	ADCSRB = 0b00000000;
  78:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__EEPROM_REGION_LENGTH__+0x7f007b>
  7c:	08 95       	ret

0000007e <Callbacks_Init>:
void Callbacks_Remove_Timer(unsigned char ID_CB)
{
	if (ID_CB >= 0 && ID_CB < MAX_CALLBACKS);
	{
		My_CB[ID_CB] = 0;
		Time_CB[ID_CB] = 0;
  7e:	ed e0       	ldi	r30, 0x0D	; 13
  80:	f1 e0       	ldi	r31, 0x01	; 1
  82:	ab e3       	ldi	r26, 0x3B	; 59
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	81 e2       	ldi	r24, 0x21	; 33
  88:	91 e0       	ldi	r25, 0x01	; 1
  8a:	11 92       	st	Z+, r1
  8c:	11 92       	st	Z+, r1
  8e:	1d 92       	st	X+, r1
  90:	1d 92       	st	X+, r1
  92:	e8 17       	cp	r30, r24
  94:	f9 07       	cpc	r31, r25
  96:	c9 f7       	brne	.-14     	; 0x8a <Callbacks_Init+0xc>
  98:	08 95       	ret

0000009a <Callbacks_Record_Timer>:
  9a:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <My_CB>
  9e:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <My_CB+0x1>
  a2:	23 2b       	or	r18, r19
  a4:	71 f0       	breq	.+28     	; 0xc2 <Callbacks_Record_Timer+0x28>
  a6:	ef e0       	ldi	r30, 0x0F	; 15
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	41 91       	ld	r20, Z+
  b4:	51 91       	ld	r21, Z+
  b6:	45 2b       	or	r20, r21
  b8:	d1 f7       	brne	.-12     	; 0xae <Callbacks_Record_Timer+0x14>
  ba:	2a 30       	cpi	r18, 0x0A	; 10
  bc:	31 05       	cpc	r19, r1
  be:	18 f0       	brcs	.+6      	; 0xc6 <Callbacks_Record_Timer+0x2c>
  c0:	16 c0       	rjmp	.+44     	; 0xee <Callbacks_Record_Timer+0x54>
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	a9 01       	movw	r20, r18
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	fa 01       	movw	r30, r20
  ce:	e3 5f       	subi	r30, 0xF3	; 243
  d0:	fe 4f       	sbci	r31, 0xFE	; 254
  d2:	91 83       	std	Z+1, r25	; 0x01
  d4:	80 83       	st	Z, r24
  d6:	fa 01       	movw	r30, r20
  d8:	e5 5c       	subi	r30, 0xC5	; 197
  da:	fe 4f       	sbci	r31, 0xFE	; 254
  dc:	71 83       	std	Z+1, r23	; 0x01
  de:	60 83       	st	Z, r22
  e0:	fa 01       	movw	r30, r20
  e2:	e1 5b       	subi	r30, 0xB1	; 177
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	11 82       	std	Z+1, r1	; 0x01
  e8:	10 82       	st	Z, r1
  ea:	82 2f       	mov	r24, r18
  ec:	08 95       	ret
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	08 95       	ret

000000f2 <Callbacks_Record_USART>:
  f2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <My_CB_USART+0x1>
  f6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <My_CB_USART>
  fa:	08 95       	ret

000000fc <callbacks_Start>:
{
	unsigned char idx;
	// INITIALISATION DE TOUTES LES INTERRUPTIONS
	/* initialise Interruptions */

	sei();
  fc:	78 94       	sei
	// CONFIGURATION TIMER
	TIMER0_Init_1ms() ;
  fe:	e8 d2       	rcall	.+1488   	; 0x6d0 <TIMER0_Init_1ms>
 100:	0f 2e       	mov	r0, r31
 102:	f1 e2       	ldi	r31, 0x21	; 33
 104:	cf 2e       	mov	r12, r31
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	df 2e       	mov	r13, r31
 10a:	f0 2d       	mov	r31, r0
 10c:	0f 2e       	mov	r0, r31
 10e:	fd e0       	ldi	r31, 0x0D	; 13
 110:	8f 2e       	mov	r8, r31
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	9f 2e       	mov	r9, r31
 116:	f0 2d       	mov	r31, r0
 118:	0f 2e       	mov	r0, r31
 11a:	ff e4       	ldi	r31, 0x4F	; 79
 11c:	af 2e       	mov	r10, r31
 11e:	f1 e0       	ldi	r31, 0x01	; 1
 120:	bf 2e       	mov	r11, r31
 122:	f0 2d       	mov	r31, r0
 124:	0f 2e       	mov	r0, r31
 126:	fb e3       	ldi	r31, 0x3B	; 59
 128:	6f 2e       	mov	r6, r31
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	7f 2e       	mov	r7, r31
 12e:	f0 2d       	mov	r31, r0
 130:	84 01       	movw	r16, r8
 132:	e5 01       	movw	r28, r10
 134:	73 01       	movw	r14, r6
	{

		// CHECK LES CONDITIONS POUR RAPPELER LES FONCTIONS LIEES AUTEMPS
		for (idx = 0 ; idx < MAX_CALLBACKS; idx++)
		{
			if (My_CB[idx])if (TICK_CB[idx] >= Time_CB[idx])
 136:	d8 01       	movw	r26, r16
 138:	ed 91       	ld	r30, X+
 13a:	fd 91       	ld	r31, X+
 13c:	8d 01       	movw	r16, r26
 13e:	30 97       	sbiw	r30, 0x00	; 0
 140:	59 f0       	breq	.+22     	; 0x158 <callbacks_Start+0x5c>
 142:	28 81       	ld	r18, Y
 144:	39 81       	ldd	r19, Y+1	; 0x01
 146:	d7 01       	movw	r26, r14
 148:	8d 91       	ld	r24, X+
 14a:	9c 91       	ld	r25, X
 14c:	28 17       	cp	r18, r24
 14e:	39 07       	cpc	r19, r25
 150:	18 f0       	brcs	.+6      	; 0x158 <callbacks_Start+0x5c>
			{
				TICK_CB[idx] = 0;
 152:	19 82       	std	Y+1, r1	; 0x01
 154:	18 82       	st	Y, r1
				My_CB[idx]();
 156:	09 95       	icall
 158:	22 96       	adiw	r28, 0x02	; 2
 15a:	b2 e0       	ldi	r27, 0x02	; 2
 15c:	eb 0e       	add	r14, r27
 15e:	f1 1c       	adc	r15, r1
	// BOUCLE INFINIE
	while (1)
	{

		// CHECK LES CONDITIONS POUR RAPPELER LES FONCTIONS LIEES AUTEMPS
		for (idx = 0 ; idx < MAX_CALLBACKS; idx++)
 160:	0c 15       	cp	r16, r12
 162:	1d 05       	cpc	r17, r13
 164:	41 f7       	brne	.-48     	; 0x136 <callbacks_Start+0x3a>
				TICK_CB[idx] = 0;
				My_CB[idx]();
			}
		}

		if (USART_RECEPT==TRUE) //&& My_CB_USART) // à mettre en commentaire pour que ça fonctionne sur la carte
 166:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USART_RECEPT>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	09 f7       	brne	.-62     	; 0x130 <callbacks_Start+0x34>
		{
			USART_RECEPT=FALSE;
 16e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <USART_RECEPT>
			//My_CB_USART(buffer); // Fonctionne en simulation
			Affichage_usart(buffer); // à mettre pour que ça fonctionne avec la carte
 172:	86 e2       	ldi	r24, 0x26	; 38
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	cc d0       	rcall	.+408    	; 0x310 <Affichage_usart>
 178:	db cf       	rjmp	.-74     	; 0x130 <callbacks_Start+0x34>

0000017a <__vector_11>:

// INTERRUPTION TIMER

//Interruption TIMER1
ISR(TIMER1_COMPA_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
 190:	ef e4       	ldi	r30, 0x4F	; 79
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	23 e6       	ldi	r18, 0x63	; 99
 196:	31 e0       	ldi	r19, 0x01	; 1

	for ( tmp_int = 0 ; tmp_int < MAX_CALLBACKS; tmp_int++) TICK_CB[tmp_int]++;
 198:	80 81       	ld	r24, Z
 19a:	91 81       	ldd	r25, Z+1	; 0x01
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	81 93       	st	Z+, r24
 1a0:	91 93       	st	Z+, r25
 1a2:	e2 17       	cp	r30, r18
 1a4:	f3 07       	cpc	r31, r19
 1a6:	c1 f7       	brne	.-16     	; 0x198 <__vector_11+0x1e>
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <tmp_int>

}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_18>:

// Interruption sur la reception en USART
ISR(USART_RX_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	buffer[emplacement]=UDR0;
 1e6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <emplacement>
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 1f0:	ea 5d       	subi	r30, 0xDA	; 218
 1f2:	fe 4f       	sbci	r31, 0xFE	; 254
 1f4:	80 83       	st	Z, r24

	if(buffer[emplacement]==0 ||buffer[emplacement]=='\r')
 1f6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <emplacement>
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ea 5d       	subi	r30, 0xDA	; 218
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	41 f0       	breq	.+16     	; 0x216 <__vector_18+0x52>
 206:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <emplacement>
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ea 5d       	subi	r30, 0xDA	; 218
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	80 81       	ld	r24, Z
 212:	8d 30       	cpi	r24, 0x0D	; 13
 214:	a9 f4       	brne	.+42     	; 0x240 <__vector_18+0x7c>
	{
		buffer[emplacement]= 0;
 216:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <emplacement>
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	ea 5d       	subi	r30, 0xDA	; 218
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	10 82       	st	Z, r1
		USART_RECEPT=TRUE;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <USART_RECEPT>
		emplacement=0;
 228:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <emplacement>
		Usart_Tx('\r');
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	5e d2       	rcall	.+1212   	; 0x6ec <Usart_Tx>
		Usart_Tx('>');
 230:	8e e3       	ldi	r24, 0x3E	; 62
 232:	5c d2       	rcall	.+1208   	; 0x6ec <Usart_Tx>
		Usart_String(buffer);
 234:	86 e2       	ldi	r24, 0x26	; 38
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	61 d2       	rcall	.+1218   	; 0x6fc <Usart_String>
		Usart_Tx('\r');
 23a:	8d e0       	ldi	r24, 0x0D	; 13
 23c:	57 d2       	rcall	.+1198   	; 0x6ec <Usart_Tx>
 23e:	05 c0       	rjmp	.+10     	; 0x24a <__vector_18+0x86>
	{
		emplacement=0;
	}*/
	else
	{
		emplacement++;
 240:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <emplacement>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <emplacement>
	}

}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_21>:


// Interruption de fin de conversion

ISR (ADC_vect){
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25

	adclow = ADCL ;
 27c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 280:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <adclow>
	adchigh = ADCH ;
 284:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 288:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <adchigh>

	resultat_ADC = (adchigh << 8); // Décalage des bits présents dans ADCH de 8 vers la gauche
 28c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <adchigh>
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	98 2f       	mov	r25, r24
 294:	88 27       	eor	r24, r24
 296:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <resultat_ADC+0x1>
 29a:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <resultat_ADC>
	resultat_ADC = resultat_ADC | (unsigned int)adclow; // ou bit à bit en entre resultat_ADC qui contient les 8 bits de MSB et ADCL qui contient les 8 bits de LSB
 29e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <adclow>
 2a2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <resultat_ADC>
 2a6:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <resultat_ADC+0x1>
 2aa:	82 2b       	or	r24, r18
 2ac:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <resultat_ADC+0x1>
 2b0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <resultat_ADC>

}
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_1>:


ISR (INT0_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
	rpmcount++;
 2d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2d6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 2e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <hardware_Init>:
#include "Hardware.h"

void hardware_Init(void) {
	/* initialise Port Sortie */
	
	DDRD |=(1<<DDD1); //On initialise les bits 7 et 6 du DDRD à 1 pour les définir en output
 2f2:	51 9a       	sbi	0x0a, 1	; 10
	DDRB |=(1<<DDB3)|(1<<DDB4); // On initialise les bits 3 et 4 du DDRB en output (3 la led et 4 le relais)
 2f4:	84 b1       	in	r24, 0x04	; 4
 2f6:	88 61       	ori	r24, 0x18	; 24
 2f8:	84 b9       	out	0x04, r24	; 4
	PORTB |=(1<<PB3)|(1<<PB4);
 2fa:	85 b1       	in	r24, 0x05	; 5
 2fc:	88 61       	ori	r24, 0x18	; 24
 2fe:	85 b9       	out	0x05, r24	; 5
	// Configuration de l'interruption
	
	EICRA |= (1<<ISC01); //set bit ISC01 in EICRA // interruption sur flanc descendant de INTO
 300:	e9 e6       	ldi	r30, 0x69	; 105
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	82 60       	ori	r24, 0x02	; 2
 308:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0); //set bit in port EIMSK // activation de l'interruption sur INT0
 30a:	e8 9a       	sbi	0x1d, 0	; 29
	
	DDRC = (0<<DDC0);
 30c:	17 b8       	out	0x07, r1	; 7
 30e:	08 95       	ret

00000310 <Affichage_usart>:
	Usart_String(mesures);
	}


void Affichage_usart(volatile char *Trame)
{
 310:	08 95       	ret

00000312 <Adc3s>:
		
	}
}

void Adc3s(void)
{
 312:	08 95       	ret

00000314 <Envoi_USART>:
	Callbacks_Record_USART(Affichage_usart);
	// NARRIVE JAMAIS ICI
}
// CONTENU DES FONCTIONS CALLBACKS
void Envoi_USART(void)
{
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	65 97       	sbiw	r28, 0x15	; 21
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
	char mesures[21]; //13
	strcpy(mesures,"U");
 32c:	85 e5       	ldi	r24, 0x55	; 85
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	9a 83       	std	Y+2, r25	; 0x02
 332:	89 83       	std	Y+1, r24	; 0x01
	strcat(mesures,String_Tension);
 334:	6c e6       	ldi	r22, 0x6C	; 108
 336:	71 e0       	ldi	r23, 0x01	; 1
 338:	8e 01       	movw	r16, r28
 33a:	0f 5f       	subi	r16, 0xFF	; 255
 33c:	1f 4f       	sbci	r17, 0xFF	; 255
 33e:	c8 01       	movw	r24, r16
 340:	fa d1       	rcall	.+1012   	; 0x736 <strcat>
	strcat(mesures,";IM");
 342:	f8 01       	movw	r30, r16
 344:	01 90       	ld	r0, Z+
 346:	00 20       	and	r0, r0
 348:	e9 f7       	brne	.-6      	; 0x344 <Envoi_USART+0x30>
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	8b e3       	ldi	r24, 0x3B	; 59
 34e:	99 e4       	ldi	r25, 0x49	; 73
 350:	ad e4       	ldi	r26, 0x4D	; 77
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	80 83       	st	Z, r24
 356:	91 83       	std	Z+1, r25	; 0x01
 358:	a2 83       	std	Z+2, r26	; 0x02
 35a:	b3 83       	std	Z+3, r27	; 0x03
	strcat(mesures,String_Courant_Moteur);
 35c:	66 e6       	ldi	r22, 0x66	; 102
 35e:	71 e0       	ldi	r23, 0x01	; 1
 360:	c8 01       	movw	r24, r16
 362:	e9 d1       	rcall	.+978    	; 0x736 <strcat>
	strcat(mesures,";RPM");
 364:	d8 01       	movw	r26, r16
 366:	0d 90       	ld	r0, X+
 368:	00 20       	and	r0, r0
 36a:	e9 f7       	brne	.-6      	; 0x366 <Envoi_USART+0x52>
 36c:	11 97       	sbiw	r26, 0x01	; 1
 36e:	85 e0       	ldi	r24, 0x05	; 5
 370:	e0 e0       	ldi	r30, 0x00	; 0
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	01 90       	ld	r0, Z+
 376:	0d 92       	st	X+, r0
 378:	8a 95       	dec	r24
 37a:	e1 f7       	brne	.-8      	; 0x374 <Envoi_USART+0x60>
	strcat(mesures,String_RPM);
 37c:	67 e8       	ldi	r22, 0x87	; 135
 37e:	71 e0       	ldi	r23, 0x01	; 1
 380:	c8 01       	movw	r24, r16
 382:	d9 d1       	rcall	.+946    	; 0x736 <strcat>
	strcat(mesures,"\n");
 384:	f8 01       	movw	r30, r16
 386:	01 90       	ld	r0, Z+
 388:	00 20       	and	r0, r0
 38a:	e9 f7       	brne	.-6      	; 0x386 <Envoi_USART+0x72>
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	8a e0       	ldi	r24, 0x0A	; 10
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	91 83       	std	Z+1, r25	; 0x01
 394:	80 83       	st	Z, r24
	Usart_String(mesures);
 396:	c8 01       	movw	r24, r16
 398:	b1 d1       	rcall	.+866    	; 0x6fc <Usart_String>
	}
 39a:	65 96       	adiw	r28, 0x15	; 21
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	08 95       	ret

000003b0 <Adc1s>:
}


void Adc1s(void)
{
	ADMUX = 0b01000001;//Attention logique inversée 
 3b0:	81 e4       	ldi	r24, 0x41	; 65
 3b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADCSRA |=(1<<ADSC);
 3b6:	ea e7       	ldi	r30, 0x7A	; 122
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	80 64       	ori	r24, 0x40	; 64
 3be:	80 83       	st	Z, r24
	Tension = resultat_ADC;
 3c0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <resultat_ADC>
 3c4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <resultat_ADC+0x1>
 3c8:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <Tension+0x1>
 3cc:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <Tension>
	for(int i=0;i<5;i++){
		String_Tension[i]=0;
 3d0:	ec e6       	ldi	r30, 0x6C	; 108
 3d2:	f1 e0       	ldi	r31, 0x01	; 1
 3d4:	10 82       	st	Z, r1
 3d6:	11 82       	std	Z+1, r1	; 0x01
 3d8:	12 82       	std	Z+2, r1	; 0x02
 3da:	13 82       	std	Z+3, r1	; 0x03
 3dc:	14 82       	std	Z+4, r1	; 0x04
	}
	itoa(Tension, String_Tension, 10);
 3de:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Tension>
 3e2:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Tension+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3e6:	4a e0       	ldi	r20, 0x0A	; 10
 3e8:	bf 01       	movw	r22, r30
 3ea:	b7 d1       	rcall	.+878    	; 0x75a <__itoa_ncheck>
	if(Tension<10)
 3ec:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Tension>
 3f0:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Tension+0x1>
 3f4:	0a 97       	sbiw	r24, 0x0a	; 10
 3f6:	bc f4       	brge	.+46     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
	{
		strcpy(Buffer,"000");
 3f8:	80 e3       	ldi	r24, 0x30	; 48
 3fa:	90 e3       	ldi	r25, 0x30	; 48
 3fc:	a0 e3       	ldi	r26, 0x30	; 48
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <Buffer>
 404:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <Buffer+0x1>
 408:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <Buffer+0x2>
 40c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <Buffer+0x3>
		strcat(Buffer,String_Tension);
 410:	6c e6       	ldi	r22, 0x6C	; 108
 412:	71 e0       	ldi	r23, 0x01	; 1
 414:	8e e8       	ldi	r24, 0x8E	; 142
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	8e d1       	rcall	.+796    	; 0x736 <strcat>
		strcpy(String_Tension,Buffer);
 41a:	6e e8       	ldi	r22, 0x8E	; 142
 41c:	71 e0       	ldi	r23, 0x01	; 1
 41e:	8c e6       	ldi	r24, 0x6C	; 108
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	94 d1       	rcall	.+808    	; 0x74c <strcpy>
 424:	08 95       	ret
	}
	else if(Tension>10 && Tension<100)
 426:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Tension>
 42a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Tension+0x1>
 42e:	0b 97       	sbiw	r24, 0x0b	; 11
 430:	dc f0       	brlt	.+54     	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
 432:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Tension>
 436:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Tension+0x1>
 43a:	84 36       	cpi	r24, 0x64	; 100
 43c:	91 05       	cpc	r25, r1
 43e:	a4 f4       	brge	.+40     	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
	{
		strcpy(Buffer,"00");
 440:	80 e3       	ldi	r24, 0x30	; 48
 442:	90 e3       	ldi	r25, 0x30	; 48
 444:	a0 e0       	ldi	r26, 0x00	; 0
 446:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <Buffer>
 44a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <Buffer+0x1>
 44e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <Buffer+0x2>
		strcat(Buffer,String_Tension);
 452:	6c e6       	ldi	r22, 0x6C	; 108
 454:	71 e0       	ldi	r23, 0x01	; 1
 456:	8e e8       	ldi	r24, 0x8E	; 142
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	6d d1       	rcall	.+730    	; 0x736 <strcat>
		strcpy(String_Tension,Buffer);
 45c:	6e e8       	ldi	r22, 0x8E	; 142
 45e:	71 e0       	ldi	r23, 0x01	; 1
 460:	8c e6       	ldi	r24, 0x6C	; 108
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	73 d1       	rcall	.+742    	; 0x74c <strcpy>
 466:	08 95       	ret
	}
	else if(Tension>100 && Tension<1000)
 468:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Tension>
 46c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Tension+0x1>
 470:	85 36       	cpi	r24, 0x65	; 101
 472:	91 05       	cpc	r25, r1
 474:	bc f0       	brlt	.+46     	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
 476:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Tension>
 47a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Tension+0x1>
 47e:	88 3e       	cpi	r24, 0xE8	; 232
 480:	93 40       	sbci	r25, 0x03	; 3
 482:	84 f4       	brge	.+32     	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
	{
		strcpy(Buffer,"0");
 484:	80 e3       	ldi	r24, 0x30	; 48
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <Buffer+0x1>
 48c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <Buffer>
		strcat(Buffer,String_Tension);
 490:	6c e6       	ldi	r22, 0x6C	; 108
 492:	71 e0       	ldi	r23, 0x01	; 1
 494:	8e e8       	ldi	r24, 0x8E	; 142
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	4e d1       	rcall	.+668    	; 0x736 <strcat>
		strcpy(String_Tension,Buffer);
 49a:	6e e8       	ldi	r22, 0x8E	; 142
 49c:	71 e0       	ldi	r23, 0x01	; 1
 49e:	8c e6       	ldi	r24, 0x6C	; 108
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	54 d1       	rcall	.+680    	; 0x74c <strcpy>
 4a4:	08 95       	ret

000004a6 <Adc2s>:
	}
	
}
void Adc2s(void)
{
	ADMUX = 0b01000000;//Attention logique inversée (idem)
 4a6:	80 e4       	ldi	r24, 0x40	; 64
 4a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADCSRA |=(1<<ADSC);
 4ac:	ea e7       	ldi	r30, 0x7A	; 122
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	80 64       	ori	r24, 0x40	; 64
 4b4:	80 83       	st	Z, r24
	Courant_Moteur = resultat_ADC;
 4b6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <resultat_ADC>
 4ba:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <resultat_ADC+0x1>
 4be:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <Courant_Moteur+0x1>
 4c2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <Courant_Moteur>
	for(int i=0;i<5;i++){
		String_Courant_Moteur[i]=0;
 4c6:	e6 e6       	ldi	r30, 0x66	; 102
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	10 82       	st	Z, r1
 4cc:	11 82       	std	Z+1, r1	; 0x01
 4ce:	12 82       	std	Z+2, r1	; 0x02
 4d0:	13 82       	std	Z+3, r1	; 0x03
 4d2:	14 82       	std	Z+4, r1	; 0x04
	}
	itoa(Courant_Moteur, String_Courant_Moteur, 10);
 4d4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <Courant_Moteur>
 4d8:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <Courant_Moteur+0x1>
 4dc:	4a e0       	ldi	r20, 0x0A	; 10
 4de:	bf 01       	movw	r22, r30
 4e0:	3c d1       	rcall	.+632    	; 0x75a <__itoa_ncheck>
	if(Courant_Moteur<10)
 4e2:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <Courant_Moteur>
 4e6:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <Courant_Moteur+0x1>
 4ea:	0a 97       	sbiw	r24, 0x0a	; 10
 4ec:	bc f4       	brge	.+46     	; 0x51c <__stack+0x1d>
	{
		strcpy(Buffer,"000");
 4ee:	80 e3       	ldi	r24, 0x30	; 48
 4f0:	90 e3       	ldi	r25, 0x30	; 48
 4f2:	a0 e3       	ldi	r26, 0x30	; 48
 4f4:	b0 e0       	ldi	r27, 0x00	; 0
 4f6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <Buffer>
 4fa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <Buffer+0x1>
 4fe:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <Buffer+0x2>
 502:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <Buffer+0x3>
		strcat(Buffer,String_Courant_Moteur);
 506:	66 e6       	ldi	r22, 0x66	; 102
 508:	71 e0       	ldi	r23, 0x01	; 1
 50a:	8e e8       	ldi	r24, 0x8E	; 142
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	13 d1       	rcall	.+550    	; 0x736 <strcat>
		strcpy(String_Courant_Moteur,Buffer);
 510:	6e e8       	ldi	r22, 0x8E	; 142
 512:	71 e0       	ldi	r23, 0x01	; 1
 514:	86 e6       	ldi	r24, 0x66	; 102
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	19 d1       	rcall	.+562    	; 0x74c <strcpy>
 51a:	08 95       	ret
	}
	else if(Courant_Moteur>10 && Courant_Moteur<100)
 51c:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <Courant_Moteur>
 520:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <Courant_Moteur+0x1>
 524:	0b 97       	sbiw	r24, 0x0b	; 11
 526:	dc f0       	brlt	.+54     	; 0x55e <__stack+0x5f>
 528:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <Courant_Moteur>
 52c:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <Courant_Moteur+0x1>
 530:	84 36       	cpi	r24, 0x64	; 100
 532:	91 05       	cpc	r25, r1
 534:	a4 f4       	brge	.+40     	; 0x55e <__stack+0x5f>
	{
		strcpy(Buffer,"00");
 536:	80 e3       	ldi	r24, 0x30	; 48
 538:	90 e3       	ldi	r25, 0x30	; 48
 53a:	a0 e0       	ldi	r26, 0x00	; 0
 53c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <Buffer>
 540:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <Buffer+0x1>
 544:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <Buffer+0x2>
		strcat(Buffer,String_Courant_Moteur);
 548:	66 e6       	ldi	r22, 0x66	; 102
 54a:	71 e0       	ldi	r23, 0x01	; 1
 54c:	8e e8       	ldi	r24, 0x8E	; 142
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	f2 d0       	rcall	.+484    	; 0x736 <strcat>
		strcpy(String_Courant_Moteur,Buffer);
 552:	6e e8       	ldi	r22, 0x8E	; 142
 554:	71 e0       	ldi	r23, 0x01	; 1
 556:	86 e6       	ldi	r24, 0x66	; 102
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	f8 d0       	rcall	.+496    	; 0x74c <strcpy>
 55c:	08 95       	ret
	}
	else if(Courant_Moteur>100 && Courant_Moteur<1000)
 55e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <Courant_Moteur>
 562:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <Courant_Moteur+0x1>
 566:	85 36       	cpi	r24, 0x65	; 101
 568:	91 05       	cpc	r25, r1
 56a:	bc f0       	brlt	.+46     	; 0x59a <__stack+0x9b>
 56c:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <Courant_Moteur>
 570:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <Courant_Moteur+0x1>
 574:	88 3e       	cpi	r24, 0xE8	; 232
 576:	93 40       	sbci	r25, 0x03	; 3
 578:	84 f4       	brge	.+32     	; 0x59a <__stack+0x9b>
	{
		strcpy(Buffer,"0");
 57a:	80 e3       	ldi	r24, 0x30	; 48
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <Buffer+0x1>
 582:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <Buffer>
		strcat(Buffer,String_Courant_Moteur);
 586:	66 e6       	ldi	r22, 0x66	; 102
 588:	71 e0       	ldi	r23, 0x01	; 1
 58a:	8e e8       	ldi	r24, 0x8E	; 142
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	d3 d0       	rcall	.+422    	; 0x736 <strcat>
		strcpy(String_Courant_Moteur,Buffer);
 590:	6e e8       	ldi	r22, 0x8E	; 142
 592:	71 e0       	ldi	r23, 0x01	; 1
 594:	86 e6       	ldi	r24, 0x66	; 102
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	d9 d0       	rcall	.+434    	; 0x74c <strcpy>
 59a:	08 95       	ret

0000059c <Interrupt_Speed>:
}

void Interrupt_Speed(void)
{
	//Desable interrupt int0
	EIMSK = (0<<INT0); //set bit in port EIMSK // désactivation de l'interruption sur INT0
 59c:	1d ba       	out	0x1d, r1	; 29
	rpm = rpmcount * 60;
 59e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 5a2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 5a6:	4c e3       	ldi	r20, 0x3C	; 60
 5a8:	42 9f       	mul	r20, r18
 5aa:	c0 01       	movw	r24, r0
 5ac:	43 9f       	mul	r20, r19
 5ae:	90 0d       	add	r25, r0
 5b0:	11 24       	eor	r1, r1
 5b2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <rpm+0x1>
 5b6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <rpm>
	for(int i=0;i<5;i++){
		String_RPM[i]=0;
 5ba:	e7 e8       	ldi	r30, 0x87	; 135
 5bc:	f1 e0       	ldi	r31, 0x01	; 1
 5be:	10 82       	st	Z, r1
 5c0:	11 82       	std	Z+1, r1	; 0x01
 5c2:	12 82       	std	Z+2, r1	; 0x02
 5c4:	13 82       	std	Z+3, r1	; 0x03
 5c6:	14 82       	std	Z+4, r1	; 0x04
 5c8:	4a e0       	ldi	r20, 0x0A	; 10
 5ca:	bf 01       	movw	r22, r30
 5cc:	c6 d0       	rcall	.+396    	; 0x75a <__itoa_ncheck>
	}
	itoa(rpm, String_RPM, 10);
	if(rpm<10)
 5ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rpm>
 5d2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <rpm+0x1>
 5d6:	8a 30       	cpi	r24, 0x0A	; 10
 5d8:	91 05       	cpc	r25, r1
 5da:	bc f4       	brge	.+46     	; 0x60a <Interrupt_Speed+0x6e>
	{
		strcpy(Buffer,"000");
 5dc:	80 e3       	ldi	r24, 0x30	; 48
 5de:	90 e3       	ldi	r25, 0x30	; 48
 5e0:	a0 e3       	ldi	r26, 0x30	; 48
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <Buffer>
 5e8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <Buffer+0x1>
 5ec:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <Buffer+0x2>
 5f0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <Buffer+0x3>
		strcat(Buffer,String_RPM);
 5f4:	67 e8       	ldi	r22, 0x87	; 135
 5f6:	71 e0       	ldi	r23, 0x01	; 1
 5f8:	8e e8       	ldi	r24, 0x8E	; 142
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	9c d0       	rcall	.+312    	; 0x736 <strcat>
		strcpy(String_RPM,Buffer);
 5fe:	6e e8       	ldi	r22, 0x8E	; 142
 600:	71 e0       	ldi	r23, 0x01	; 1
 602:	87 e8       	ldi	r24, 0x87	; 135
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	a2 d0       	rcall	.+324    	; 0x74c <strcpy>
 608:	2f c0       	rjmp	.+94     	; 0x668 <Interrupt_Speed+0xcc>
	}
	else if(rpm>10 && rpm<100)
 60a:	9c 01       	movw	r18, r24
 60c:	2b 50       	subi	r18, 0x0B	; 11
 60e:	31 09       	sbc	r19, r1
 610:	29 35       	cpi	r18, 0x59	; 89
 612:	31 05       	cpc	r19, r1
 614:	a0 f4       	brcc	.+40     	; 0x63e <Interrupt_Speed+0xa2>
	{
		strcpy(Buffer,"00");
 616:	80 e3       	ldi	r24, 0x30	; 48
 618:	90 e3       	ldi	r25, 0x30	; 48
 61a:	a0 e0       	ldi	r26, 0x00	; 0
 61c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <Buffer>
 620:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <Buffer+0x1>
 624:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <Buffer+0x2>
		strcat(Buffer,String_RPM);
 628:	67 e8       	ldi	r22, 0x87	; 135
 62a:	71 e0       	ldi	r23, 0x01	; 1
 62c:	8e e8       	ldi	r24, 0x8E	; 142
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	82 d0       	rcall	.+260    	; 0x736 <strcat>
		strcpy(String_RPM,Buffer);
 632:	6e e8       	ldi	r22, 0x8E	; 142
 634:	71 e0       	ldi	r23, 0x01	; 1
 636:	87 e8       	ldi	r24, 0x87	; 135
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	88 d0       	rcall	.+272    	; 0x74c <strcpy>
 63c:	15 c0       	rjmp	.+42     	; 0x668 <Interrupt_Speed+0xcc>
	}
	else if(rpm>100 && rpm<1000)
 63e:	85 56       	subi	r24, 0x65	; 101
 640:	91 09       	sbc	r25, r1
 642:	83 38       	cpi	r24, 0x83	; 131
 644:	93 40       	sbci	r25, 0x03	; 3
 646:	80 f4       	brcc	.+32     	; 0x668 <Interrupt_Speed+0xcc>
	{
		strcpy(Buffer,"0");
 648:	80 e3       	ldi	r24, 0x30	; 48
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <Buffer+0x1>
 650:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <Buffer>
		strcat(Buffer,String_RPM);
 654:	67 e8       	ldi	r22, 0x87	; 135
 656:	71 e0       	ldi	r23, 0x01	; 1
 658:	8e e8       	ldi	r24, 0x8E	; 142
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	6c d0       	rcall	.+216    	; 0x736 <strcat>
		strcpy(String_RPM,Buffer);
 65e:	6e e8       	ldi	r22, 0x8E	; 142
 660:	71 e0       	ldi	r23, 0x01	; 1
 662:	87 e8       	ldi	r24, 0x87	; 135
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	72 d0       	rcall	.+228    	; 0x74c <strcpy>
	else
	{
		
	}
	
	rpmcount = 0; // Restart the RPM counter
 668:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 66c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	EIMSK |= (1<<INT0); //set bit in port EIMSK // réactivation de l'interruption sur INT0
 670:	e8 9a       	sbi	0x1d, 0	; 29
 672:	08 95       	ret

00000674 <main>:

// FONCTION PRINCIPALE
int main(void)
{
	// INITIALISATION HARDWARE
	hardware_Init() ;
 674:	3e de       	rcall	.-900    	; 0x2f2 <hardware_Init>
	// Configuration de l'usart
	USART_Init_9600();
 676:	50 d0       	rcall	.+160    	; 0x718 <USART_Init_9600>
	// Configuration de l'ADC
	Init_ADC();
 678:	f9 dc       	rcall	.-1550   	; 0x6c <Init_ADC>
	//INITIALISATION CALLBACKS
	Callbacks_Init() ;
 67a:	01 dd       	rcall	.-1534   	; 0x7e <Callbacks_Init>
	ID_Envoi_USART = Callbacks_Record_Timer(Envoi_USART, 1000) ; //(Mettre 1000 pour avoir 500ms) 
 67c:	68 ee       	ldi	r22, 0xE8	; 232
 67e:	73 e0       	ldi	r23, 0x03	; 3
 680:	8a e8       	ldi	r24, 0x8A	; 138
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	0a dd       	rcall	.-1516   	; 0x9a <Callbacks_Record_Timer>
 686:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <ID_Envoi_USART>
	ID_Adc1s = Callbacks_Record_Timer(Adc1s, 200);
 68a:	68 ec       	ldi	r22, 0xC8	; 200
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	88 ed       	ldi	r24, 0xD8	; 216
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	03 dd       	rcall	.-1530   	; 0x9a <Callbacks_Record_Timer>
 694:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <ID_Adc1s>
	ID_Adc2s = Callbacks_Record_Timer(Adc2s, 200);
 698:	68 ec       	ldi	r22, 0xC8	; 200
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	83 e5       	ldi	r24, 0x53	; 83
 69e:	92 e0       	ldi	r25, 0x02	; 2
 6a0:	fc dc       	rcall	.-1544   	; 0x9a <Callbacks_Record_Timer>
 6a2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <ID_Adc2s>
	ID_Adc3s = Callbacks_Record_Timer(Adc3s, 200);
 6a6:	68 ec       	ldi	r22, 0xC8	; 200
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	89 e8       	ldi	r24, 0x89	; 137
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	f5 dc       	rcall	.-1558   	; 0x9a <Callbacks_Record_Timer>
 6b0:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <ID_Adc3s>
	ID_Interrupt_Speed = Callbacks_Record_Timer(Interrupt_Speed, 2000);
 6b4:	60 ed       	ldi	r22, 0xD0	; 208
 6b6:	77 e0       	ldi	r23, 0x07	; 7
 6b8:	8e ec       	ldi	r24, 0xCE	; 206
 6ba:	92 e0       	ldi	r25, 0x02	; 2
 6bc:	ee dc       	rcall	.-1572   	; 0x9a <Callbacks_Record_Timer>
 6be:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <ID_Interrupt_Speed>
	callbacks_Start();
 6c2:	1c dd       	rcall	.-1480   	; 0xfc <callbacks_Start>
	//INITIALISATION LCD
	Callbacks_Record_USART(Affichage_usart);
 6c4:	88 e8       	ldi	r24, 0x88	; 136
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	14 dd       	rcall	.-1496   	; 0xf2 <Callbacks_Record_USART>
	// NARRIVE JAMAIS ICI
}
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	08 95       	ret

000006d0 <TIMER0_Init_1ms>:
//CONTENU FONCTIONS EXTERNES


void TIMER0_Init_1ms(void)
{
	TCCR1B |=(1<<WGM12)|(1<<CS12);//|(1<<CS10);
 6d0:	e1 e8       	ldi	r30, 0x81	; 129
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	8c 60       	ori	r24, 0x0C	; 12
 6d8:	80 83       	st	Z, r24
	OCR1AL = 0b00000001;
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	TIMSK1 |=(1<<OCIE1A);
 6e0:	ef e6       	ldi	r30, 0x6F	; 111
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	82 60       	ori	r24, 0x02	; 2
 6e8:	80 83       	st	Z, r24
 6ea:	08 95       	ret

000006ec <Usart_Tx>:

//CONTENU FONCTIONS EXTERNES

void Usart_Tx(char data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
 6ec:	e0 ec       	ldi	r30, 0xC0	; 192
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	90 81       	ld	r25, Z
 6f2:	95 ff       	sbrs	r25, 5
 6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <Usart_Tx+0x4>
	UDR0=data;
 6f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 6fa:	08 95       	ret

000006fc <Usart_String>:
}



void Usart_String(char datastr[])
{
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	ec 01       	movw	r28, r24

	int i=0;
	while(datastr[i]!=0){
 702:	88 81       	ld	r24, Y
 704:	88 23       	and	r24, r24
 706:	29 f0       	breq	.+10     	; 0x712 <Usart_String+0x16>
 708:	21 96       	adiw	r28, 0x01	; 1
		
		Usart_Tx(datastr[i]);
 70a:	f0 df       	rcall	.-32     	; 0x6ec <Usart_Tx>

void Usart_String(char datastr[])
{

	int i=0;
	while(datastr[i]!=0){
 70c:	89 91       	ld	r24, Y+
 70e:	81 11       	cpse	r24, r1
 710:	fc cf       	rjmp	.-8      	; 0x70a <Usart_String+0xe>
		Usart_Tx(datastr[i]);
		i++;
	}

	
}
 712:	df 91       	pop	r29
 714:	cf 91       	pop	r28
 716:	08 95       	ret

00000718 <USART_Init_9600>:

void USART_Init_9600(void)
{
	
	UBRR0L=0b00001100; //Baudrate = 9600bps
 718:	8c e0       	ldi	r24, 0x0C	; 12
 71a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	UBRR0H=0b00000000;
 71e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UCSR0A = 0b00100010; //receiver is ready to receive data, double speed
 722:	82 e2       	ldi	r24, 0x22	; 34
 724:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
	UCSR0B = 0b10011000; //Activation de l'émetteur et activation de l'interruption sur la reception USART
 728:	88 e9       	ldi	r24, 0x98	; 152
 72a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
	UCSR0C = 0b00000110; //Mode asynchrone, pas de bit de parité, 1 bit de stop, 8 bits de données
 72e:	86 e0       	ldi	r24, 0x06	; 6
 730:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
 734:	08 95       	ret

00000736 <strcat>:
 736:	fb 01       	movw	r30, r22
 738:	dc 01       	movw	r26, r24
 73a:	0d 90       	ld	r0, X+
 73c:	00 20       	and	r0, r0
 73e:	e9 f7       	brne	.-6      	; 0x73a <strcat+0x4>
 740:	11 97       	sbiw	r26, 0x01	; 1
 742:	01 90       	ld	r0, Z+
 744:	0d 92       	st	X+, r0
 746:	00 20       	and	r0, r0
 748:	e1 f7       	brne	.-8      	; 0x742 <strcat+0xc>
 74a:	08 95       	ret

0000074c <strcpy>:
 74c:	fb 01       	movw	r30, r22
 74e:	dc 01       	movw	r26, r24
 750:	01 90       	ld	r0, Z+
 752:	0d 92       	st	X+, r0
 754:	00 20       	and	r0, r0
 756:	e1 f7       	brne	.-8      	; 0x750 <strcpy+0x4>
 758:	08 95       	ret

0000075a <__itoa_ncheck>:
 75a:	bb 27       	eor	r27, r27
 75c:	4a 30       	cpi	r20, 0x0A	; 10
 75e:	31 f4       	brne	.+12     	; 0x76c <__itoa_ncheck+0x12>
 760:	99 23       	and	r25, r25
 762:	22 f4       	brpl	.+8      	; 0x76c <__itoa_ncheck+0x12>
 764:	bd e2       	ldi	r27, 0x2D	; 45
 766:	90 95       	com	r25
 768:	81 95       	neg	r24
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	01 c0       	rjmp	.+2      	; 0x770 <__utoa_common>

0000076e <__utoa_ncheck>:
 76e:	bb 27       	eor	r27, r27

00000770 <__utoa_common>:
 770:	fb 01       	movw	r30, r22
 772:	55 27       	eor	r21, r21
 774:	aa 27       	eor	r26, r26
 776:	88 0f       	add	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	aa 1f       	adc	r26, r26
 77c:	a4 17       	cp	r26, r20
 77e:	10 f0       	brcs	.+4      	; 0x784 <__utoa_common+0x14>
 780:	a4 1b       	sub	r26, r20
 782:	83 95       	inc	r24
 784:	50 51       	subi	r21, 0x10	; 16
 786:	b9 f7       	brne	.-18     	; 0x776 <__utoa_common+0x6>
 788:	a0 5d       	subi	r26, 0xD0	; 208
 78a:	aa 33       	cpi	r26, 0x3A	; 58
 78c:	08 f0       	brcs	.+2      	; 0x790 <__utoa_common+0x20>
 78e:	a9 5d       	subi	r26, 0xD9	; 217
 790:	a1 93       	st	Z+, r26
 792:	00 97       	sbiw	r24, 0x00	; 0
 794:	79 f7       	brne	.-34     	; 0x774 <__utoa_common+0x4>
 796:	b1 11       	cpse	r27, r1
 798:	b1 93       	st	Z+, r27
 79a:	11 92       	st	Z+, r1
 79c:	cb 01       	movw	r24, r22
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <strrev>

000007a0 <strrev>:
 7a0:	dc 01       	movw	r26, r24
 7a2:	fc 01       	movw	r30, r24
 7a4:	67 2f       	mov	r22, r23
 7a6:	71 91       	ld	r23, Z+
 7a8:	77 23       	and	r23, r23
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <strrev+0x4>
 7ac:	32 97       	sbiw	r30, 0x02	; 2
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <strrev+0x18>
 7b0:	7c 91       	ld	r23, X
 7b2:	6d 93       	st	X+, r22
 7b4:	70 83       	st	Z, r23
 7b6:	62 91       	ld	r22, -Z
 7b8:	ae 17       	cp	r26, r30
 7ba:	bf 07       	cpc	r27, r31
 7bc:	c8 f3       	brcs	.-14     	; 0x7b0 <strrev+0x10>
 7be:	08 95       	ret

000007c0 <_exit>:
 7c0:	f8 94       	cli

000007c2 <__stop_program>:
 7c2:	ff cf       	rjmp	.-2      	; 0x7c2 <__stop_program>
