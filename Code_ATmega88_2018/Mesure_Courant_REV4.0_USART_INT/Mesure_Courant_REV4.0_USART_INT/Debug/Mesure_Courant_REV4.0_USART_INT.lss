
Mesure_Courant_REV4.0_USART_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800100  00800100  000006de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e22  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000594  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000841  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044a  00000000  00000000  00002aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002f37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	a6 c0       	rjmp	.+332    	; 0x164 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	15 c1       	rjmp	.+554    	; 0x256 <__vector_21>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 38       	cpi	r26, 0x86	; 134
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	72 d2       	rcall	.+1252   	; 0x536 <main>
  52:	09 c3       	rjmp	.+1554   	; 0x666 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Init_ADC>:

//CONTENU FONCTIONS EXTERNES

void Init_ADC(void)
{
	ADMUX = 0b01000000; //on prend AVCC comme reference et justification à droite (mode 10bits) et ADC0 comme entrée
  56:	80 e4       	ldi	r24, 0x40	; 64
  58:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADCSRA = 0b10001100;  //freq à 1MHz/16==>62.500kHz et activation de l'interruption de fin de conversion
  5c:	8c e8       	ldi	r24, 0x8C	; 140
  5e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	ADCSRB = 0b00000000;
  62:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__EEPROM_REGION_LENGTH__+0x7f007b>
  66:	08 95       	ret

00000068 <Callbacks_Init>:
void Callbacks_Remove_Timer(unsigned char ID_CB)
{
	if (ID_CB >= 0 && ID_CB < MAX_CALLBACKS);
	{
		My_CB[ID_CB] = 0;
		Time_CB[ID_CB] = 0;
  68:	e3 e0       	ldi	r30, 0x03	; 3
  6a:	f1 e0       	ldi	r31, 0x01	; 1
  6c:	a1 e3       	ldi	r26, 0x31	; 49
  6e:	b1 e0       	ldi	r27, 0x01	; 1
  70:	87 e1       	ldi	r24, 0x17	; 23
  72:	91 e0       	ldi	r25, 0x01	; 1
  74:	11 92       	st	Z+, r1
  76:	11 92       	st	Z+, r1
  78:	1d 92       	st	X+, r1
  7a:	1d 92       	st	X+, r1
  7c:	e8 17       	cp	r30, r24
  7e:	f9 07       	cpc	r31, r25
  80:	c9 f7       	brne	.-14     	; 0x74 <Callbacks_Init+0xc>
  82:	08 95       	ret

00000084 <Callbacks_Record_Timer>:
  84:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <My_CB>
  88:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <My_CB+0x1>
  8c:	23 2b       	or	r18, r19
  8e:	71 f0       	breq	.+28     	; 0xac <Callbacks_Record_Timer+0x28>
  90:	e5 e0       	ldi	r30, 0x05	; 5
  92:	f1 e0       	ldi	r31, 0x01	; 1
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	2f 5f       	subi	r18, 0xFF	; 255
  9a:	3f 4f       	sbci	r19, 0xFF	; 255
  9c:	41 91       	ld	r20, Z+
  9e:	51 91       	ld	r21, Z+
  a0:	45 2b       	or	r20, r21
  a2:	d1 f7       	brne	.-12     	; 0x98 <Callbacks_Record_Timer+0x14>
  a4:	2a 30       	cpi	r18, 0x0A	; 10
  a6:	31 05       	cpc	r19, r1
  a8:	18 f0       	brcs	.+6      	; 0xb0 <Callbacks_Record_Timer+0x2c>
  aa:	16 c0       	rjmp	.+44     	; 0xd8 <Callbacks_Record_Timer+0x54>
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	a9 01       	movw	r20, r18
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	fa 01       	movw	r30, r20
  b8:	ed 5f       	subi	r30, 0xFD	; 253
  ba:	fe 4f       	sbci	r31, 0xFE	; 254
  bc:	91 83       	std	Z+1, r25	; 0x01
  be:	80 83       	st	Z, r24
  c0:	fa 01       	movw	r30, r20
  c2:	ef 5c       	subi	r30, 0xCF	; 207
  c4:	fe 4f       	sbci	r31, 0xFE	; 254
  c6:	71 83       	std	Z+1, r23	; 0x01
  c8:	60 83       	st	Z, r22
  ca:	fa 01       	movw	r30, r20
  cc:	eb 5b       	subi	r30, 0xBB	; 187
  ce:	fe 4f       	sbci	r31, 0xFE	; 254
  d0:	11 82       	std	Z+1, r1	; 0x01
  d2:	10 82       	st	Z, r1
  d4:	82 2f       	mov	r24, r18
  d6:	08 95       	ret
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	08 95       	ret

000000dc <Callbacks_Record_USART>:
  dc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <My_CB_USART+0x1>
  e0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <My_CB_USART>
  e4:	08 95       	ret

000000e6 <callbacks_Start>:
{
	unsigned char idx;
	// INITIALISATION DE TOUTES LES INTERRUPTIONS
	/* initialise Interruptions */

	sei();
  e6:	78 94       	sei
	// CONFIGURATION TIMER
	TIMER0_Init_1ms() ;
  e8:	46 d2       	rcall	.+1164   	; 0x576 <TIMER0_Init_1ms>
  ea:	0f 2e       	mov	r0, r31
  ec:	f7 e1       	ldi	r31, 0x17	; 23
  ee:	cf 2e       	mov	r12, r31
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	df 2e       	mov	r13, r31
  f4:	f0 2d       	mov	r31, r0
  f6:	0f 2e       	mov	r0, r31
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	8f 2e       	mov	r8, r31
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	9f 2e       	mov	r9, r31
 100:	f0 2d       	mov	r31, r0
 102:	0f 2e       	mov	r0, r31
 104:	f5 e4       	ldi	r31, 0x45	; 69
 106:	af 2e       	mov	r10, r31
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	bf 2e       	mov	r11, r31
 10c:	f0 2d       	mov	r31, r0
 10e:	0f 2e       	mov	r0, r31
 110:	f1 e3       	ldi	r31, 0x31	; 49
 112:	6f 2e       	mov	r6, r31
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	7f 2e       	mov	r7, r31
 118:	f0 2d       	mov	r31, r0
 11a:	84 01       	movw	r16, r8
 11c:	e5 01       	movw	r28, r10
 11e:	73 01       	movw	r14, r6
	{

		// CHECK LES CONDITIONS POUR RAPPELER LES FONCTIONS LIEES AUTEMPS
		for (idx = 0 ; idx < MAX_CALLBACKS; idx++)
		{
			if (My_CB[idx])if (TICK_CB[idx] >= Time_CB[idx])
 120:	d8 01       	movw	r26, r16
 122:	ed 91       	ld	r30, X+
 124:	fd 91       	ld	r31, X+
 126:	8d 01       	movw	r16, r26
 128:	30 97       	sbiw	r30, 0x00	; 0
 12a:	59 f0       	breq	.+22     	; 0x142 <callbacks_Start+0x5c>
 12c:	28 81       	ld	r18, Y
 12e:	39 81       	ldd	r19, Y+1	; 0x01
 130:	d7 01       	movw	r26, r14
 132:	8d 91       	ld	r24, X+
 134:	9c 91       	ld	r25, X
 136:	28 17       	cp	r18, r24
 138:	39 07       	cpc	r19, r25
 13a:	18 f0       	brcs	.+6      	; 0x142 <callbacks_Start+0x5c>
			{
				TICK_CB[idx] = 0;
 13c:	19 82       	std	Y+1, r1	; 0x01
 13e:	18 82       	st	Y, r1
				My_CB[idx]();
 140:	09 95       	icall
 142:	22 96       	adiw	r28, 0x02	; 2
 144:	b2 e0       	ldi	r27, 0x02	; 2
 146:	eb 0e       	add	r14, r27
 148:	f1 1c       	adc	r15, r1
	// BOUCLE INFINIE
	while (1)
	{

		// CHECK LES CONDITIONS POUR RAPPELER LES FONCTIONS LIEES AUTEMPS
		for (idx = 0 ; idx < MAX_CALLBACKS; idx++)
 14a:	0c 15       	cp	r16, r12
 14c:	1d 05       	cpc	r17, r13
 14e:	41 f7       	brne	.-48     	; 0x120 <callbacks_Start+0x3a>
				TICK_CB[idx] = 0;
				My_CB[idx]();
			}
		}

		if (USART_RECEPT==TRUE) //&& My_CB_USART) // à mettre en commentaire pour que ça fonctionne sur la carte
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	09 f7       	brne	.-62     	; 0x11a <callbacks_Start+0x34>
		{
			USART_RECEPT=FALSE;
 158:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			//My_CB_USART(buffer); // Fonctionne en simulation
			Affichage_usart(buffer); // à mettre pour que ça fonctionne avec la carte
 15c:	8c e1       	ldi	r24, 0x1C	; 28
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	b5 d0       	rcall	.+362    	; 0x2cc <Affichage_usart>
 162:	db cf       	rjmp	.-74     	; 0x11a <callbacks_Start+0x34>

00000164 <__vector_11>:

// INTERRUPTION TIMER

//Interruption TIMER1
ISR(TIMER1_COMPA_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
 17a:	e5 e4       	ldi	r30, 0x45	; 69
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	29 e5       	ldi	r18, 0x59	; 89
 180:	31 e0       	ldi	r19, 0x01	; 1

	for ( tmp_int = 0 ; tmp_int < MAX_CALLBACKS; tmp_int++) TICK_CB[tmp_int]++;
 182:	80 81       	ld	r24, Z
 184:	91 81       	ldd	r25, Z+1	; 0x01
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	81 93       	st	Z+, r24
 18a:	91 93       	st	Z+, r25
 18c:	e2 17       	cp	r30, r18
 18e:	f3 07       	cpc	r31, r19
 190:	c1 f7       	brne	.-16     	; 0x182 <__vector_11+0x1e>
 192:	8a e0       	ldi	r24, 0x0A	; 10
 194:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <tmp_int>

}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <__vector_18>:

// Interruption sur la reception en USART
ISR(USART_RX_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	buffer[emplacement]=UDR0;
 1d0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <emplacement>
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 1da:	e4 5e       	subi	r30, 0xE4	; 228
 1dc:	fe 4f       	sbci	r31, 0xFE	; 254
 1de:	80 83       	st	Z, r24

	if(buffer[emplacement]==0 ||buffer[emplacement]=='\r')
 1e0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <emplacement>
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	e4 5e       	subi	r30, 0xE4	; 228
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	41 f0       	breq	.+16     	; 0x200 <__vector_18+0x52>
 1f0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <emplacement>
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	e4 5e       	subi	r30, 0xE4	; 228
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	80 81       	ld	r24, Z
 1fc:	8d 30       	cpi	r24, 0x0D	; 13
 1fe:	a9 f4       	brne	.+42     	; 0x22a <__vector_18+0x7c>
	{
		buffer[emplacement]= 0;
 200:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <emplacement>
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e4 5e       	subi	r30, 0xE4	; 228
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	10 82       	st	Z, r1
		USART_RECEPT=TRUE;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		emplacement=0;
 212:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <emplacement>
		Usart_Tx('\r');
 216:	8d e0       	ldi	r24, 0x0D	; 13
 218:	bc d1       	rcall	.+888    	; 0x592 <Usart_Tx>
		Usart_Tx('>');
 21a:	8e e3       	ldi	r24, 0x3E	; 62
 21c:	ba d1       	rcall	.+884    	; 0x592 <Usart_Tx>
		Usart_String(buffer);
 21e:	8c e1       	ldi	r24, 0x1C	; 28
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	bf d1       	rcall	.+894    	; 0x5a2 <Usart_String>
		Usart_Tx('\r');
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	b5 d1       	rcall	.+874    	; 0x592 <Usart_Tx>
 228:	05 c0       	rjmp	.+10     	; 0x234 <__vector_18+0x86>
	{
		emplacement=0;
	}*/
	else
	{
		emplacement++;
 22a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <emplacement>
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <emplacement>
	}

}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <__vector_21>:


// Interruption de fin de conversion

ISR (ADC_vect){
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	2f 93       	push	r18
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25

	adclow = ADCL ;
 266:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 26a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adclow>
	adchigh = ADCH ;
 26e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 272:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <adchigh>

	resultat_ADC = (adchigh << 8); // Décalage des bits présents dans ADCH de 8 vers la gauche
 276:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <adchigh>
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	98 2f       	mov	r25, r24
 27e:	88 27       	eor	r24, r24
 280:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <resultat_ADC+0x1>
 284:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <resultat_ADC>
	resultat_ADC = resultat_ADC | (unsigned int)adclow; // ou bit à bit en entre resultat_ADC qui contient les 8 bits de MSB et ADCL qui contient les 8 bits de LSB
 288:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <adclow>
 28c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <resultat_ADC>
 290:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <resultat_ADC+0x1>
 294:	82 2b       	or	r24, r18
 296:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <resultat_ADC+0x1>
 29a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <resultat_ADC>

}
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <hardware_Init>:
#include "Hardware.h"

void hardware_Init(void) {
	/* initialise Port Sortie */
	
	DDRD |=(1<<DDD1); //On initialise les bits 7 et 6 du DDRD à 1 pour les définir en output
 2ae:	51 9a       	sbi	0x0a, 1	; 10
	DDRB |=(1<<DDB3)|(1<<DDB4); // On initialise les bits 3 et 4 du DDRB en output (3 la led et 4 le relais)
 2b0:	84 b1       	in	r24, 0x04	; 4
 2b2:	88 61       	ori	r24, 0x18	; 24
 2b4:	84 b9       	out	0x04, r24	; 4
	PORTB |=(1<<PB3)|(1<<PB4);
 2b6:	85 b1       	in	r24, 0x05	; 5
 2b8:	88 61       	ori	r24, 0x18	; 24
 2ba:	85 b9       	out	0x05, r24	; 5
	// Configuration de l'interruption
	
	EICRA |= (1<<ISC01); //set bit ISC01 in EICRA // interruption sur flanc descendant de INTO
 2bc:	e9 e6       	ldi	r30, 0x69	; 105
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	82 60       	ori	r24, 0x02	; 2
 2c4:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0); //set bit in port EIMSK // activation de l'interruption sur INT0
 2c6:	e8 9a       	sbi	0x1d, 0	; 29
	
	DDRC = (0<<DDC0);
 2c8:	17 b8       	out	0x07, r1	; 7
 2ca:	08 95       	ret

000002cc <Affichage_usart>:
	Usart_String(mesures);
	}


void Affichage_usart(volatile char *Trame)
{
 2cc:	08 95       	ret

000002ce <Envoi_USART>:
	Callbacks_Record_USART(Affichage_usart);
	// NARRIVE JAMAIS ICI
}
// CONTENU DES FONCTIONS CALLBACKS
void Envoi_USART(void)
{
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	2d 97       	sbiw	r28, 0x0d	; 13
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
	char mesures[13];
	strcpy(mesures,"U");
 2e6:	85 e5       	ldi	r24, 0x55	; 85
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	9a 83       	std	Y+2, r25	; 0x02
 2ec:	89 83       	std	Y+1, r24	; 0x01
	strcat(mesures,String_Tension);
 2ee:	62 e6       	ldi	r22, 0x62	; 98
 2f0:	71 e0       	ldi	r23, 0x01	; 1
 2f2:	8e 01       	movw	r16, r28
 2f4:	0f 5f       	subi	r16, 0xFF	; 255
 2f6:	1f 4f       	sbci	r17, 0xFF	; 255
 2f8:	c8 01       	movw	r24, r16
 2fa:	70 d1       	rcall	.+736    	; 0x5dc <strcat>
	strcat(mesures,";IM");
 2fc:	f8 01       	movw	r30, r16
 2fe:	01 90       	ld	r0, Z+
 300:	00 20       	and	r0, r0
 302:	e9 f7       	brne	.-6      	; 0x2fe <Envoi_USART+0x30>
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	8b e3       	ldi	r24, 0x3B	; 59
 308:	99 e4       	ldi	r25, 0x49	; 73
 30a:	ad e4       	ldi	r26, 0x4D	; 77
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	80 83       	st	Z, r24
 310:	91 83       	std	Z+1, r25	; 0x01
 312:	a2 83       	std	Z+2, r26	; 0x02
 314:	b3 83       	std	Z+3, r27	; 0x03
	strcat(mesures,String_Courant_Moteur);
 316:	6c e5       	ldi	r22, 0x5C	; 92
 318:	71 e0       	ldi	r23, 0x01	; 1
 31a:	c8 01       	movw	r24, r16
 31c:	5f d1       	rcall	.+702    	; 0x5dc <strcat>
	strcat(mesures,"\n");
 31e:	f8 01       	movw	r30, r16
 320:	01 90       	ld	r0, Z+
 322:	00 20       	and	r0, r0
 324:	e9 f7       	brne	.-6      	; 0x320 <Envoi_USART+0x52>
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	8a e0       	ldi	r24, 0x0A	; 10
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	91 83       	std	Z+1, r25	; 0x01
 32e:	80 83       	st	Z, r24
	Usart_String(mesures);
 330:	c8 01       	movw	r24, r16
 332:	37 d1       	rcall	.+622    	; 0x5a2 <Usart_String>
	}
 334:	2d 96       	adiw	r28, 0x0d	; 13
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <Adc1s>:
}


void Adc1s(void)
{
	ADMUX = 0b01000001;//Attention logique inversée 
 34a:	81 e4       	ldi	r24, 0x41	; 65
 34c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADCSRA |=(1<<ADSC);
 350:	ea e7       	ldi	r30, 0x7A	; 122
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 64       	ori	r24, 0x40	; 64
 358:	80 83       	st	Z, r24
	Tension = resultat_ADC;
 35a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <resultat_ADC>
 35e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <resultat_ADC+0x1>
 362:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <Tension+0x1>
 366:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <Tension>
	for(int i=0;i<5;i++){
		String_Tension[i]=0;
 36a:	e2 e6       	ldi	r30, 0x62	; 98
 36c:	f1 e0       	ldi	r31, 0x01	; 1
 36e:	10 82       	st	Z, r1
 370:	11 82       	std	Z+1, r1	; 0x01
 372:	12 82       	std	Z+2, r1	; 0x02
 374:	13 82       	std	Z+3, r1	; 0x03
 376:	14 82       	std	Z+4, r1	; 0x04
	}
	itoa(Tension, String_Tension, 10);
 378:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Tension>
 37c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <Tension+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 380:	4a e0       	ldi	r20, 0x0A	; 10
 382:	bf 01       	movw	r22, r30
 384:	3d d1       	rcall	.+634    	; 0x600 <__itoa_ncheck>
	if(Tension<10)
 386:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Tension>
 38a:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <Tension+0x1>
 38e:	0a 97       	sbiw	r24, 0x0a	; 10
 390:	bc f4       	brge	.+46     	; 0x3c0 <Adc1s+0x76>
	{
		strcpy(Buffer,"000");
 392:	80 e3       	ldi	r24, 0x30	; 48
 394:	90 e3       	ldi	r25, 0x30	; 48
 396:	a0 e3       	ldi	r26, 0x30	; 48
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Buffer>
 39e:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <Buffer+0x1>
 3a2:	a0 93 7f 01 	sts	0x017F, r26	; 0x80017f <Buffer+0x2>
 3a6:	b0 93 80 01 	sts	0x0180, r27	; 0x800180 <Buffer+0x3>
		strcat(Buffer,String_Tension);
 3aa:	62 e6       	ldi	r22, 0x62	; 98
 3ac:	71 e0       	ldi	r23, 0x01	; 1
 3ae:	8d e7       	ldi	r24, 0x7D	; 125
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	14 d1       	rcall	.+552    	; 0x5dc <strcat>
		strcpy(String_Tension,Buffer);
 3b4:	6d e7       	ldi	r22, 0x7D	; 125
 3b6:	71 e0       	ldi	r23, 0x01	; 1
 3b8:	82 e6       	ldi	r24, 0x62	; 98
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	1a d1       	rcall	.+564    	; 0x5f2 <strcpy>
 3be:	08 95       	ret
	}
	else if(Tension>10 && Tension<100)
 3c0:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Tension>
 3c4:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <Tension+0x1>
 3c8:	0b 97       	sbiw	r24, 0x0b	; 11
 3ca:	dc f0       	brlt	.+54     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3cc:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Tension>
 3d0:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <Tension+0x1>
 3d4:	84 36       	cpi	r24, 0x64	; 100
 3d6:	91 05       	cpc	r25, r1
 3d8:	a4 f4       	brge	.+40     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
	{
		strcpy(Buffer,"00");
 3da:	80 e3       	ldi	r24, 0x30	; 48
 3dc:	90 e3       	ldi	r25, 0x30	; 48
 3de:	a0 e0       	ldi	r26, 0x00	; 0
 3e0:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Buffer>
 3e4:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <Buffer+0x1>
 3e8:	a0 93 7f 01 	sts	0x017F, r26	; 0x80017f <Buffer+0x2>
		strcat(Buffer,String_Tension);
 3ec:	62 e6       	ldi	r22, 0x62	; 98
 3ee:	71 e0       	ldi	r23, 0x01	; 1
 3f0:	8d e7       	ldi	r24, 0x7D	; 125
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	f3 d0       	rcall	.+486    	; 0x5dc <strcat>
		strcpy(String_Tension,Buffer);
 3f6:	6d e7       	ldi	r22, 0x7D	; 125
 3f8:	71 e0       	ldi	r23, 0x01	; 1
 3fa:	82 e6       	ldi	r24, 0x62	; 98
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	f9 d0       	rcall	.+498    	; 0x5f2 <strcpy>
 400:	08 95       	ret
	}
	else if(Tension>100 && Tension<1000)
 402:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Tension>
 406:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <Tension+0x1>
 40a:	85 36       	cpi	r24, 0x65	; 101
 40c:	91 05       	cpc	r25, r1
 40e:	bc f0       	brlt	.+46     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
 410:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Tension>
 414:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <Tension+0x1>
 418:	88 3e       	cpi	r24, 0xE8	; 232
 41a:	93 40       	sbci	r25, 0x03	; 3
 41c:	84 f4       	brge	.+32     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
	{
		strcpy(Buffer,"0");
 41e:	80 e3       	ldi	r24, 0x30	; 48
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <Buffer+0x1>
 426:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Buffer>
		strcat(Buffer,String_Tension);
 42a:	62 e6       	ldi	r22, 0x62	; 98
 42c:	71 e0       	ldi	r23, 0x01	; 1
 42e:	8d e7       	ldi	r24, 0x7D	; 125
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	d4 d0       	rcall	.+424    	; 0x5dc <strcat>
		strcpy(String_Tension,Buffer);
 434:	6d e7       	ldi	r22, 0x7D	; 125
 436:	71 e0       	ldi	r23, 0x01	; 1
 438:	82 e6       	ldi	r24, 0x62	; 98
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	da d0       	rcall	.+436    	; 0x5f2 <strcpy>
 43e:	08 95       	ret

00000440 <Adc2s>:
	}
	
}
void Adc2s(void)
{
	ADMUX = 0b01000000;//Attention logique inversée (idem)
 440:	80 e4       	ldi	r24, 0x40	; 64
 442:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADCSRA |=(1<<ADSC);
 446:	ea e7       	ldi	r30, 0x7A	; 122
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	80 64       	ori	r24, 0x40	; 64
 44e:	80 83       	st	Z, r24
	Courant_Moteur = resultat_ADC;
 450:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <resultat_ADC>
 454:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <resultat_ADC+0x1>
 458:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <Courant_Moteur+0x1>
 45c:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <Courant_Moteur>
	for(int i=0;i<5;i++){
		String_Courant_Moteur[i]=0;
 460:	ec e5       	ldi	r30, 0x5C	; 92
 462:	f1 e0       	ldi	r31, 0x01	; 1
 464:	10 82       	st	Z, r1
 466:	11 82       	std	Z+1, r1	; 0x01
 468:	12 82       	std	Z+2, r1	; 0x02
 46a:	13 82       	std	Z+3, r1	; 0x03
 46c:	14 82       	std	Z+4, r1	; 0x04
	}
	itoa(Courant_Moteur, String_Courant_Moteur, 10);
 46e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <Courant_Moteur>
 472:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <Courant_Moteur+0x1>
 476:	4a e0       	ldi	r20, 0x0A	; 10
 478:	bf 01       	movw	r22, r30
 47a:	c2 d0       	rcall	.+388    	; 0x600 <__itoa_ncheck>
	if(Courant_Moteur<10)
 47c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <Courant_Moteur>
 480:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <Courant_Moteur+0x1>
 484:	0a 97       	sbiw	r24, 0x0a	; 10
 486:	bc f4       	brge	.+46     	; 0x4b6 <Adc2s+0x76>
	{
		strcpy(Buffer,"000");
 488:	80 e3       	ldi	r24, 0x30	; 48
 48a:	90 e3       	ldi	r25, 0x30	; 48
 48c:	a0 e3       	ldi	r26, 0x30	; 48
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Buffer>
 494:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <Buffer+0x1>
 498:	a0 93 7f 01 	sts	0x017F, r26	; 0x80017f <Buffer+0x2>
 49c:	b0 93 80 01 	sts	0x0180, r27	; 0x800180 <Buffer+0x3>
		strcat(Buffer,String_Courant_Moteur);
 4a0:	6c e5       	ldi	r22, 0x5C	; 92
 4a2:	71 e0       	ldi	r23, 0x01	; 1
 4a4:	8d e7       	ldi	r24, 0x7D	; 125
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	99 d0       	rcall	.+306    	; 0x5dc <strcat>
		strcpy(String_Courant_Moteur,Buffer);
 4aa:	6d e7       	ldi	r22, 0x7D	; 125
 4ac:	71 e0       	ldi	r23, 0x01	; 1
 4ae:	8c e5       	ldi	r24, 0x5C	; 92
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	9f d0       	rcall	.+318    	; 0x5f2 <strcpy>
 4b4:	08 95       	ret
	}
	else if(Courant_Moteur>10 && Courant_Moteur<100)
 4b6:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <Courant_Moteur>
 4ba:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <Courant_Moteur+0x1>
 4be:	0b 97       	sbiw	r24, 0x0b	; 11
 4c0:	dc f0       	brlt	.+54     	; 0x4f8 <Adc2s+0xb8>
 4c2:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <Courant_Moteur>
 4c6:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <Courant_Moteur+0x1>
 4ca:	84 36       	cpi	r24, 0x64	; 100
 4cc:	91 05       	cpc	r25, r1
 4ce:	a4 f4       	brge	.+40     	; 0x4f8 <Adc2s+0xb8>
	{
		strcpy(Buffer,"00");
 4d0:	80 e3       	ldi	r24, 0x30	; 48
 4d2:	90 e3       	ldi	r25, 0x30	; 48
 4d4:	a0 e0       	ldi	r26, 0x00	; 0
 4d6:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Buffer>
 4da:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <Buffer+0x1>
 4de:	a0 93 7f 01 	sts	0x017F, r26	; 0x80017f <Buffer+0x2>
		strcat(Buffer,String_Courant_Moteur);
 4e2:	6c e5       	ldi	r22, 0x5C	; 92
 4e4:	71 e0       	ldi	r23, 0x01	; 1
 4e6:	8d e7       	ldi	r24, 0x7D	; 125
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	78 d0       	rcall	.+240    	; 0x5dc <strcat>
		strcpy(String_Courant_Moteur,Buffer);
 4ec:	6d e7       	ldi	r22, 0x7D	; 125
 4ee:	71 e0       	ldi	r23, 0x01	; 1
 4f0:	8c e5       	ldi	r24, 0x5C	; 92
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	7e d0       	rcall	.+252    	; 0x5f2 <strcpy>
 4f6:	08 95       	ret
	}
	else if(Courant_Moteur>100 && Courant_Moteur<1000)
 4f8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <Courant_Moteur>
 4fc:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <Courant_Moteur+0x1>
 500:	85 36       	cpi	r24, 0x65	; 101
 502:	91 05       	cpc	r25, r1
 504:	bc f0       	brlt	.+46     	; 0x534 <__stack+0x35>
 506:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <Courant_Moteur>
 50a:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <Courant_Moteur+0x1>
 50e:	88 3e       	cpi	r24, 0xE8	; 232
 510:	93 40       	sbci	r25, 0x03	; 3
 512:	84 f4       	brge	.+32     	; 0x534 <__stack+0x35>
	{
		strcpy(Buffer,"0");
 514:	80 e3       	ldi	r24, 0x30	; 48
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <Buffer+0x1>
 51c:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Buffer>
		strcat(Buffer,String_Courant_Moteur);
 520:	6c e5       	ldi	r22, 0x5C	; 92
 522:	71 e0       	ldi	r23, 0x01	; 1
 524:	8d e7       	ldi	r24, 0x7D	; 125
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	59 d0       	rcall	.+178    	; 0x5dc <strcat>
		strcpy(String_Courant_Moteur,Buffer);
 52a:	6d e7       	ldi	r22, 0x7D	; 125
 52c:	71 e0       	ldi	r23, 0x01	; 1
 52e:	8c e5       	ldi	r24, 0x5C	; 92
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	5f d0       	rcall	.+190    	; 0x5f2 <strcpy>
 534:	08 95       	ret

00000536 <main>:

// FONCTION PRINCIPALE
int main(void)
{
	// INITIALISATION HARDWARE
	hardware_Init() ;
 536:	bb de       	rcall	.-650    	; 0x2ae <hardware_Init>
	// Configuration de l'usart
	USART_Init_9600();
 538:	42 d0       	rcall	.+132    	; 0x5be <USART_Init_9600>
	// Configuration de l'ADC
	Init_ADC();
 53a:	8d dd       	rcall	.-1254   	; 0x56 <Init_ADC>
	//INITIALISATION CALLBACKS
	Callbacks_Init() ;
 53c:	95 dd       	rcall	.-1238   	; 0x68 <Callbacks_Init>
	ID_Envoi_USART = Callbacks_Record_Timer(Envoi_USART, 1000) ; //(Mettre 1000 pour avoir 500ms) 
 53e:	68 ee       	ldi	r22, 0xE8	; 232
 540:	73 e0       	ldi	r23, 0x03	; 3
 542:	87 e6       	ldi	r24, 0x67	; 103
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	9e dd       	rcall	.-1220   	; 0x84 <Callbacks_Record_Timer>
 548:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <ID_Envoi_USART>
	ID_Adc1s = Callbacks_Record_Timer(Adc1s, 200);
 54c:	68 ec       	ldi	r22, 0xC8	; 200
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	85 ea       	ldi	r24, 0xA5	; 165
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	97 dd       	rcall	.-1234   	; 0x84 <Callbacks_Record_Timer>
 556:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <ID_Adc1s>
	ID_Adc2s = Callbacks_Record_Timer(Adc2s, 200);
 55a:	68 ec       	ldi	r22, 0xC8	; 200
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	80 e2       	ldi	r24, 0x20	; 32
 560:	92 e0       	ldi	r25, 0x02	; 2
 562:	90 dd       	rcall	.-1248   	; 0x84 <Callbacks_Record_Timer>
 564:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <ID_Adc2s>
	callbacks_Start();
 568:	be dd       	rcall	.-1156   	; 0xe6 <callbacks_Start>
	//INITIALISATION LCD
	Callbacks_Record_USART(Affichage_usart);
 56a:	86 e6       	ldi	r24, 0x66	; 102
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	b6 dd       	rcall	.-1172   	; 0xdc <Callbacks_Record_USART>
	// NARRIVE JAMAIS ICI
}
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	08 95       	ret

00000576 <TIMER0_Init_1ms>:
//CONTENU FONCTIONS EXTERNES


void TIMER0_Init_1ms(void)
{
	TCCR1B |=(1<<WGM12)|(1<<CS12);//|(1<<CS10);
 576:	e1 e8       	ldi	r30, 0x81	; 129
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	8c 60       	ori	r24, 0x0C	; 12
 57e:	80 83       	st	Z, r24
	OCR1AL = 0b00000001;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	TIMSK1 |=(1<<OCIE1A);
 586:	ef e6       	ldi	r30, 0x6F	; 111
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	82 60       	ori	r24, 0x02	; 2
 58e:	80 83       	st	Z, r24
 590:	08 95       	ret

00000592 <Usart_Tx>:

//CONTENU FONCTIONS EXTERNES

void Usart_Tx(char data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
 592:	e0 ec       	ldi	r30, 0xC0	; 192
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	90 81       	ld	r25, Z
 598:	95 ff       	sbrs	r25, 5
 59a:	fd cf       	rjmp	.-6      	; 0x596 <Usart_Tx+0x4>
	UDR0=data;
 59c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 5a0:	08 95       	ret

000005a2 <Usart_String>:
}



void Usart_String(char datastr[])
{
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	ec 01       	movw	r28, r24

	int i=0;
	while(datastr[i]!=0){
 5a8:	88 81       	ld	r24, Y
 5aa:	88 23       	and	r24, r24
 5ac:	29 f0       	breq	.+10     	; 0x5b8 <Usart_String+0x16>
 5ae:	21 96       	adiw	r28, 0x01	; 1
		
		Usart_Tx(datastr[i]);
 5b0:	f0 df       	rcall	.-32     	; 0x592 <Usart_Tx>

void Usart_String(char datastr[])
{

	int i=0;
	while(datastr[i]!=0){
 5b2:	89 91       	ld	r24, Y+
 5b4:	81 11       	cpse	r24, r1
 5b6:	fc cf       	rjmp	.-8      	; 0x5b0 <Usart_String+0xe>
		Usart_Tx(datastr[i]);
		i++;
	}

	
}
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <USART_Init_9600>:

void USART_Init_9600(void)
{
	
	UBRR0L=0b00001100; //Baudrate = 9600bps
 5be:	8c e0       	ldi	r24, 0x0C	; 12
 5c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	UBRR0H=0b00000000;
 5c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UCSR0A = 0b00100010; //receiver is ready to receive data, double speed
 5c8:	82 e2       	ldi	r24, 0x22	; 34
 5ca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
	UCSR0B = 0b10011000; //Activation de l'émetteur et activation de l'interruption sur la reception USART
 5ce:	88 e9       	ldi	r24, 0x98	; 152
 5d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
	UCSR0C = 0b00000110; //Mode asynchrone, pas de bit de parité, 1 bit de stop, 8 bits de données
 5d4:	86 e0       	ldi	r24, 0x06	; 6
 5d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
 5da:	08 95       	ret

000005dc <strcat>:
 5dc:	fb 01       	movw	r30, r22
 5de:	dc 01       	movw	r26, r24
 5e0:	0d 90       	ld	r0, X+
 5e2:	00 20       	and	r0, r0
 5e4:	e9 f7       	brne	.-6      	; 0x5e0 <strcat+0x4>
 5e6:	11 97       	sbiw	r26, 0x01	; 1
 5e8:	01 90       	ld	r0, Z+
 5ea:	0d 92       	st	X+, r0
 5ec:	00 20       	and	r0, r0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <strcat+0xc>
 5f0:	08 95       	ret

000005f2 <strcpy>:
 5f2:	fb 01       	movw	r30, r22
 5f4:	dc 01       	movw	r26, r24
 5f6:	01 90       	ld	r0, Z+
 5f8:	0d 92       	st	X+, r0
 5fa:	00 20       	and	r0, r0
 5fc:	e1 f7       	brne	.-8      	; 0x5f6 <strcpy+0x4>
 5fe:	08 95       	ret

00000600 <__itoa_ncheck>:
 600:	bb 27       	eor	r27, r27
 602:	4a 30       	cpi	r20, 0x0A	; 10
 604:	31 f4       	brne	.+12     	; 0x612 <__itoa_ncheck+0x12>
 606:	99 23       	and	r25, r25
 608:	22 f4       	brpl	.+8      	; 0x612 <__itoa_ncheck+0x12>
 60a:	bd e2       	ldi	r27, 0x2D	; 45
 60c:	90 95       	com	r25
 60e:	81 95       	neg	r24
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	01 c0       	rjmp	.+2      	; 0x616 <__utoa_common>

00000614 <__utoa_ncheck>:
 614:	bb 27       	eor	r27, r27

00000616 <__utoa_common>:
 616:	fb 01       	movw	r30, r22
 618:	55 27       	eor	r21, r21
 61a:	aa 27       	eor	r26, r26
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	aa 1f       	adc	r26, r26
 622:	a4 17       	cp	r26, r20
 624:	10 f0       	brcs	.+4      	; 0x62a <__utoa_common+0x14>
 626:	a4 1b       	sub	r26, r20
 628:	83 95       	inc	r24
 62a:	50 51       	subi	r21, 0x10	; 16
 62c:	b9 f7       	brne	.-18     	; 0x61c <__utoa_common+0x6>
 62e:	a0 5d       	subi	r26, 0xD0	; 208
 630:	aa 33       	cpi	r26, 0x3A	; 58
 632:	08 f0       	brcs	.+2      	; 0x636 <__utoa_common+0x20>
 634:	a9 5d       	subi	r26, 0xD9	; 217
 636:	a1 93       	st	Z+, r26
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	79 f7       	brne	.-34     	; 0x61a <__utoa_common+0x4>
 63c:	b1 11       	cpse	r27, r1
 63e:	b1 93       	st	Z+, r27
 640:	11 92       	st	Z+, r1
 642:	cb 01       	movw	r24, r22
 644:	00 c0       	rjmp	.+0      	; 0x646 <strrev>

00000646 <strrev>:
 646:	dc 01       	movw	r26, r24
 648:	fc 01       	movw	r30, r24
 64a:	67 2f       	mov	r22, r23
 64c:	71 91       	ld	r23, Z+
 64e:	77 23       	and	r23, r23
 650:	e1 f7       	brne	.-8      	; 0x64a <strrev+0x4>
 652:	32 97       	sbiw	r30, 0x02	; 2
 654:	04 c0       	rjmp	.+8      	; 0x65e <strrev+0x18>
 656:	7c 91       	ld	r23, X
 658:	6d 93       	st	X+, r22
 65a:	70 83       	st	Z, r23
 65c:	62 91       	ld	r22, -Z
 65e:	ae 17       	cp	r26, r30
 660:	bf 07       	cpc	r27, r31
 662:	c8 f3       	brcs	.-14     	; 0x656 <strrev+0x10>
 664:	08 95       	ret

00000666 <_exit>:
 666:	f8 94       	cli

00000668 <__stop_program>:
 668:	ff cf       	rjmp	.-2      	; 0x668 <__stop_program>
